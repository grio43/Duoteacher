--- a/Monitor_log.py
+++ b/Monitor_log.py
@@ -264,16 +264,16 @@ class SystemMonitor:
             
         if thread_to_join and thread_to_join.is_alive():
-                thread_to_join.join(timeout=5)
-                if thread_to_join.is_alive():
-                    logger.warning("System monitor thread did not stop gracefully")
-                # Set shutdown event to interrupt any blocking operations
-                self._shutdown_event.set()
-                # Give it one more chance to stop
-                thread_to_join.join(timeout=2)
-                if thread_to_join.is_alive():
-                    logger.error("System monitor thread is unresponsive and may remain as zombie thread")
-                    # Force cleanup of thread reference
-                    self.thread = None
+            thread_to_join.join(timeout=5)
+            if thread_to_join.is_alive():
+                logger.warning("System monitor thread did not stop gracefully")
+            # Set shutdown event to interrupt any blocking operations
+            self._shutdown_event.set()
+            # Give it one more chance to stop
+            thread_to_join.join(timeout=2)
+            if thread_to_join.is_alive():
+                logger.error("System monitor thread is unresponsive and may remain as zombie thread")
+                # Force cleanup of thread reference
+                self.thread = None
             
-        logger.info("System monitoring stopped"
+        logger.info("System monitoring stopped")
     
     def _monitor_loop(self):
         """Main monitoring loop with error handling"""
@@ -392,17 +392,16 @@ class TrainingMonitor:
        
     def _register_cleanup(self):
         """Register cleanup handlers for graceful shutdown"""
-        def cleanup():
-            """Cleanup function"""
+        def signal_handler(signum, frame):
+            """Signal handler function"""
+            logger.info(f"Received signal {signum}, shutting down...")
             if hasattr(self, 'system_monitor'):
                 self.system_monitor.stop()
             if hasattr(self, 'writer') and self.writer:
                 try:
                     self.writer.close()
                 except:
                     pass
-            logger.info(f"Received signal {signum}, shutting down...")
-            cleanup()
             sys.exit(0)
 
         # Only register signals that are available on the platform
@@ -410,12 +409,20 @@ class TrainingMonitor:
         signal_names = {signal.SIGINT: 'SIGINT', signal.SIGTERM: 'SIGTERM'}
         for sig, sig_name in signal_names.items():
             try:
-                signal.signal(sig, signal_handler)
+                signal.signal(sig, signal_handler)
                 logger.debug(f"Registered signal handler for {sig_name}")
             except (OSError, ValueError, AttributeError) as e:
                 logger.debug(f"Could not register signal {sig_name}: {e}")
         
+        def cleanup():
+            """Cleanup function for atexit"""
+            if hasattr(self, 'system_monitor'):
+                self.system_monitor.stop()
+            if hasattr(self, 'writer') and self.writer:
+                try:
+                    self.writer.close()
+                except:
+                    pass
+        
         # Register atexit handler
         atexit.register(cleanup)
